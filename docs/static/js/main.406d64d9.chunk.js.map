{"version":3,"sources":["utils/frontUtils.ts","app/hooks.ts","app/frontContextSlice.ts","utils/airtableUtils.ts","utils/helpers.ts","views/Primary/ThisConversationTab/index.tsx","components/ContactCard/index.tsx","views/Primary/SearchTab/index.tsx","views/Primary/index.tsx","views/ContactDetails/index.tsx","consts/roles.ts","views/ContactCreation/index.tsx","views/SignIn/index.tsx","app/App.tsx","app/contactsSlice.ts","app/store.ts","index.tsx"],"names":["HttpVerbsEnum","useAppSelector","useSelector","FrontContextSlice","createSlice","name","initialState","frontContext","reducers","setFrontContext","state","action","payload","actions","frontContextSelector","front","API_ENDPOINT","window","localStorage","getItem","requestWrapper","url","method","data","a","relayHttp","verb","body","headers","responce","records","getCompaniesList","GET","getContactsList","createContact","POST","checkBaseId","baseId","status","displayRow","title","value","className","displayContact","contact","Email","Phone","Role","join","Title","displayCompany","company","Company","Website","Address","Industry","Employees","Segment","Renewal","ThisConversationTab","useState","contacts","setContacts","companies","setCompanies","contactOptions","setContactOptions","selectedContact","selectContact","handleSelectContact","useCallback","option","item","find","id","key","getData","contactNames","map","c","fields","useEffect","undefined","listMessages","then","r","allConversationContacts","results","flatMap","m","to","t","handle","from","cc","bcc","b","filter","index","self","indexOf","catch","dropdownOptions","label","length","companiesToBeDisplayed","Contacts","includes","isRequired","autoWidth","onSelectValue","placeholder","options","icon","ContactCard","history","useHistory","width","onClick","push","goToItem","SearchTab","searchValue","setSearchValue","contactsToDisplay","useMemo","toLowerCase","onChange","itemName","isClearIconNeeded","tabs","Primary","location","useLocation","selectedTab","setSelectedTab","getCompanies","getContacts","pathname","variant","tabKey","isSelected","exact","path","ContactDetails","goBack","useParams","setContact","setCompany","selectedCompany","onReturnClick","ROLE_OPTIONS","formValidation","values","errors","test","email","initialValues","phone","role","ItemCompany","useFormikContext","setFieldValue","companyOptions","ItemRole","roleOptions","ContactCreation","onSubmit","dataToPass","toast","success","position","POSITION","TOP_RIGHT","autoClose","validate","handleSubmit","isValid","dirty","setTouched","touched","onBlur","errorText","isPrimaryDisabled","primaryLabel","onPrimaryClick","secondaryLabel","onSecondaryClick","SignIn","setBaseId","errorMessage","setErrorMessage","handleSignInClick","setItem","App","dispatch","useDispatch","subscription","Front","contextUpdates","subscribe","newContext","unsubscribe","basename","contactsSlice","createAsyncThunk","rejectWithValue","Promise","resolve","response","entities","contactsIds","contactsByWorkspaceId","extraReducers","builder","store","configureStore","reducer","contactsReducer","frontContextReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.406d64d9.chunk.js","sourcesContent":["export enum HttpVerbsEnum {\n\tGET = 'GET',\n\tPOST = 'POST',\n\tPUT = 'PUT',\n\tPATCH = 'PATCH',\n\tDELETE = 'DELETE'\n}\n\nexport interface HttpRelayRequest {\n\t/** The HTTP verb to use for the request. */\n\tverb: HttpVerbsEnum;\n\t/** The path relative to this application. */\n\turl: string;\n\t/** The body of the request. */\n\tbody?: unknown;\n\theaders?: object;\n}\n\nexport interface HttpResponse {\n\t/** HTTP status code */\n\tstatus: number;\n\t/** Body of the response. */\n\tbody: unknown;\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from \"./store\";\n\nexport interface FrontContext {\n\tconversation?: {\n\t\trecipient: {\n\t\t\thandle: string;\n\t\t}\n\t};\n\tlistMessages: () => Promise<{\n\t\tresults: {\n\t\t\tto: [{\n\t\t\t\thandle: string\n\t\t\t}],\n\t\t\tfrom: {\n\t\t\t\thandle: string\n\t\t\t},\n\t\t\tcc: [{\n\t\t\t\thandle: string\n\t\t\t}],\n\t\t\tbcc: [{\n\t\t\t\thandle: string\n\t\t\t}]\n\t\t}[]\n\t}>;\n}\n\nconst initialState: { frontContext: FrontContext | null } = {\n\tfrontContext: null\n}\nexport const FrontContextSlice = createSlice({\n\tname: 'frontContext',\n\tinitialState,\n\treducers: {\n\t\tsetFrontContext(state, action: PayloadAction<any>) {\n\t\t\tstate.frontContext = action.payload;\n\t\t}\n\t}\n});\n\nexport const { setFrontContext } = FrontContextSlice.actions;\n\nexport const frontContextSelector = (state: RootState):  FrontContext | null => state.front.frontContext\n\nexport default FrontContextSlice.reducer;\n","import { getBaseId } from './helpers';\nimport { CompanyFull } from '../interfaces/Company';\nimport { ContactFull } from '../interfaces/Contact';\nimport { HttpResponse, HttpVerbsEnum } from './frontUtils';\n\nconst API_ENDPOINT = `https://api.airtable.com/v0/${getBaseId()}/`;\n\nconst getHeaders = () => ({\n\t'Content-Type': 'application/json',\n});\n\ntype DataType = {\n    [key: string]: any\n}\n\nconst requestWrapper = async (frontContext: any, url: string, method: HttpVerbsEnum, data?: DataType | null): Promise<any> => {\n\tconst responce: HttpResponse = await frontContext.relayHttp({ verb: method, url: API_ENDPOINT + url, body: data, headers: getHeaders() });\n\n\t// @ts-ignore\n\treturn responce?.body?.records;\n};\n\nexport const getCompaniesList = (frontContext: any, data?: DataType): Promise<CompanyFull[]> => {\n\treturn requestWrapper(frontContext, 'Companies', HttpVerbsEnum.GET, data);\n}\n\nexport const getContactsList = (frontContext: any, data?: DataType): Promise<ContactFull[]> => {\n\treturn requestWrapper(frontContext,'Contacts', HttpVerbsEnum.GET, data);\n}\n\nexport const createContact = (frontContext: any, data: ContactFull[]): Promise<ContactFull[]> => {\n\treturn requestWrapper(frontContext,'Contacts', HttpVerbsEnum.POST, {records: data});\n}\n\nexport const checkBaseId = async (frontContext: any, baseId: string) => {\n\t// The method do request to check if base id entered correctly\n\tconst { status } = await frontContext.relayHttp({\n\t\tverb: HttpVerbsEnum.GET,\n\t\turl: `https://api.airtable.com/v0/${baseId}/Contacts`,\n\t\theaders: getHeaders(),\n\t});\n\n\treturn status === 200;\n}\n","export function getBaseId(): string | null {\n    return window.localStorage.getItem('airTableBaseId') || null;\n}\n\nexport function setBaseId(value: string): void {\n    window.localStorage.setItem('airTableBaseId', value);\n}\n","import React, { useEffect, useState, Fragment, useCallback } from 'react';\nimport { SearchableDropdown, ChannelsIcon, SearchableDropdownItem } from '@frontapp/plugin-components';\nimport { useAppSelector } from '../../../app/hooks';\nimport { frontContextSelector } from '../../../app/frontContextSlice';\nimport { Contact, ContactFull } from '../../../interfaces/Contact';\nimport { Company, CompanyFull } from '../../../interfaces/Company';\n\nimport './styles.scss';\nimport { getCompaniesList, getContactsList } from \"../../../utils/airtableUtils\";\n\nconst displayRow = ({ title, value }: { title: string; value?: any; }) => value ? <>\n\t<div className=\"details-section-item-property-name\">{title}</div>\n\t<div className=\"details-section-item-property-value\">{value}</div>\n</> : null;\n\nexport const displayContact = (contact?: Contact) => {\n\treturn contact ? <>\n\t\t<div className=\"details-section-title\">{contact['Full Name']}</div>\n\t\t{displayRow({ title: 'Email', value: contact.Email })}\n\t\t{displayRow({ title: 'Phone', value: contact.Phone })}\n\t\t{displayRow({ title: 'Role', value: contact.Role?.join(', ') })}\n\t\t{displayRow({ title: 'Title', value: contact.Title })}\n\t</> : null;\n}\n\nexport const displayCompany = (company?: Company) => {\n\treturn company ? <Fragment key={company.Company}>\n\t\t<div className=\"details-section-title\">{company.Company}</div>\n\t\t{displayRow({ title: 'Website', value: company.Website })}\n\t\t{displayRow({ title: 'Address', value: company.Address })}\n\t\t{displayRow({ title: 'Industry', value: company.Industry })}\n\t\t{displayRow({ title: 'Employees', value: company.Employees })}\n\t\t{displayRow({ title: 'Contract Value', value: company['Contract Value'] })}\n\t\t{displayRow({ title: 'Segment', value: company.Segment })}\n\t\t{displayRow({ title: 'Contract Renewal Date', value: company.Renewal })}\n\t</ Fragment> : null;\n}\n\nconst ThisConversationTab = (): JSX.Element => {\n\n\tconst frontContext = useAppSelector(frontContextSelector);\n\t// all contacts per conversation\n\tconst [contacts, setContacts] = useState<ContactFull[]>([]);\n\t// all companies per conversation\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\t// all contacts as dropdown options\n\tconst [contactOptions, setContactOptions] = useState<SearchableDropdownItem[]>([]);\n\t// currently shown contact\n\tconst [selectedContact, selectContact] = useState<ContactFull | null>();\n\n\tconst handleSelectContact = useCallback((option: SearchableDropdownItem) => {\n\t\tconst item = contacts.find(contact => contact.id === option.key)\n\t\tif (item) {\n\t\t\tselectContact(item);\n\t\t}\n\t}, [contacts]);\n\n\tconst getData = useCallback(async (contactNames: string[]) => {\n\t\t// TODO add new values to DB to see real contacts in plugin\n\t\tcontactNames = [\"Leyton Graves\",\"Pierre Smith\"]\n\t\tconst contacts = await getContactsList(frontContext, {'filterByFormula': `OR(${contactNames.map(name => `{Full Name}='${name}'`)})`});\n\t\tconst companies = await getCompaniesList(frontContext,{'filterByFormula': `OR(${contacts.map((c: any) => `FIND('${c.fields[\"Full Name\"]}', ARRAYJOIN({Contacts}))`)})`});\n\n\t\tsetContacts(contacts);\n\t\tsetCompanies(companies);\n\t}, [frontContext]);\n\n\n\t// Takes contact names from Front Conversation\n\tuseEffect(() => {\n\t\tif (!frontContext || frontContext.listMessages === undefined) {\n\t\t\tsetContacts([]);\n\t\t\tsetCompanies([]);\n\t\t\treturn;\n\t\t}\n\t\tfrontContext.listMessages().then(r => {\n\t\t\tconst allConversationContacts: string[]  = r.results.flatMap(m => [...(m.to.map(t => t.handle)), m.from?.handle, ...(m.cc?.map(c => c.handle) || []), ...(m.bcc?.map(b => b.handle) || [])])\n\t\t\t\t.filter((value, index, self) => self.indexOf(value) === index);\n\n\t\t\treturn getData(allConversationContacts);\n\t\t})\n\t\t.catch(() => {\n\t\t\tsetContacts([])\n\t\t\tsetCompanies([])\n\t\t});\n\t}, [frontContext, getData]);\n\n\tuseEffect(() => {\n\t\tconst dropdownOptions = contacts.map(contact => ({ key: contact.id as string, label: contact.fields['Full Name'] }))\n\t\tsetContactOptions(dropdownOptions);\n\n\t\tdropdownOptions.length ? handleSelectContact(dropdownOptions[0]) : selectContact(null)\n\t}, [contacts, handleSelectContact])\n\n\tconst companiesToBeDisplayed = selectedContact ? companies.filter(c => c?.fields?.Contacts?.includes(selectedContact?.id as string)).map(c => c.fields) : [];\n\n\treturn <div className=\"this-conversation-wrapper\">\n\t\t<div className=\"this-conversation-header\">\n\t\t\t<div className=\"this-conversation-dropdown\">\n\t\t\t\t<SearchableDropdown\n\t\t\t\t\tisRequired={true}\n\t\t\t\t\tautoWidth={true}\n\t\t\t\t\tonSelectValue={handleSelectContact}\n\t\t\t\t\ttitle=\"Contact\"\n\t\t\t\t\tplaceholder=\"Select contact\"\n\t\t\t\t\toptions={contactOptions}\n\t\t\t\t\tvalue={{ key: selectedContact?.id as string, label: selectedContact?.fields['Full Name'] as string }}\n\t\t\t\t\ticon={<ChannelsIcon />}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t\t{selectedContact && <div className=\"details-main-info\">\n\t\t\t{displayContact(selectedContact.fields)}\n\t\t\t{/* there is a possibility one contact has multiple companies assignment*/}\n\t\t\t{companiesToBeDisplayed.map((c: Company) =>  displayCompany(c))}\n\t\t</div>}\n\t</div>\n};\n\nexport default ThisConversationTab;\n","import React  from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n\tItemCard,\n} from '@frontapp/plugin-components';\nimport { Contact } from '../../interfaces/Contact';\n\nimport './styles.scss';\n\ninterface ContactCardProps {\n\tcontact: Contact;\n\tid: string;\n}\n\nconst ContactCard: React.FC<ContactCardProps> = ({ contact , id}) => {\n\tconst history = useHistory();\n\n\tconst goToItem = (id: string) => {\n\t\thistory.push(`/items/${id}`);\n\t};\n\n\treturn (\n\t\t<ItemCard title={contact['Full Name']} width={'100%'} className=\"contact-card\" onClick={() => goToItem(id)}>\n\t\t\t{\n\t\t\t\tcontact['Email'] ? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Email']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t\t{\n\t\t\t\tcontact['Phone']? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Phone']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t\t{\n\t\t\t\tcontact['Title'] ? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Title']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t</ItemCard>\n\t);\n};\n\nexport default ContactCard;\n","import React, { useMemo, useState } from 'react';\nimport { SearchInput, NoResults } from '@frontapp/plugin-components';\nimport ContactCard from '../../../components/ContactCard';\nimport { ContactFull } from '../../../interfaces/Contact';\nimport { CompanyFull} from '../../../interfaces/Company';\n\nimport './styles.scss';\n\nexport interface SearchTabProps {\n\tcontacts: ContactFull[];\n\tcompanies: CompanyFull[];\n}\n\nconst SearchTab:React.FC<SearchTabProps> = ({contacts}) => {\n\tconst [searchValue, setSearchValue] = useState<string>('');\n\n\tconst contactsToDisplay: ContactFull[] = useMemo(() => {\n\t\treturn contacts\n\t\t\t.filter(({ fields }) => fields['Full Name']?.toLowerCase()?.includes(searchValue.toLowerCase()) || fields['Email']?.toLowerCase()?.includes(searchValue.toLowerCase()));\n\t}, [contacts, searchValue]);\n\n\tconst onContactsSearch = (itemName: string) => {\n\t\tsetSearchValue(itemName);\n\t};\n\n\treturn <div className=\"search-tab-wrapper\">\n\t\t<SearchInput className=\"search-tab-body-search-input\" label=\"Contact name or email\" placeholder=\"Search by contact name or email\" onChange={onContactsSearch} isClearIconNeeded={false} />\n\t\t{\n\t\t\tsearchValue && (\n\t\t\t\t<div className=\"search-tab-body-search-value\">\n\t\t\t\t\tResults for “{searchValue}”\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\t{\n\t\t\tcontactsToDisplay.length > 0 && contactsToDisplay.map(({ fields, id }) => <ContactCard contact={fields} key={fields['Full Name']} id={id as string} />)\n\t\t}\n\t\t{\n\t\t\tcontactsToDisplay.length === 0 && !!searchValue && <NoResults className=\"search-tab-body-no-results\" />\n\t\t}\n\t</div>\n};\n\nexport default SearchTab;\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route, useLocation, useHistory, Link } from 'react-router-dom';\nimport { Tabs, Button } from '@frontapp/plugin-components';\nimport { ContactFull } from '../../interfaces/Contact';\nimport { CompanyFull } from \"../../interfaces/Company\";\nimport { useAppSelector } from '../../app/hooks';\nimport { frontContextSelector } from '../../app/frontContextSlice';\nimport { getCompaniesList, getContactsList } from '../../utils/airtableUtils';\n\nimport ThisConversationTab from './ThisConversationTab';\nimport SearchTab from './SearchTab';\n\nimport './styles.scss';\n\nconst tabs = [\n\t{\n\t\tlabel: 'This conversation',\n\t\tkey: '/primary'\n\t},\n\t{\n\t\tlabel: 'Search',\n\t\tkey: '/primary/search'\n\t}\n];\n\nexport interface PrimaryProps {}\n\nconst Primary: React.FC<PrimaryProps> = () => {\n\tconst history = useHistory();\n\tconst location = useLocation();\n\tconst frontContext = useAppSelector(frontContextSelector);\n\tconst [selectedTab, setSelectedTab] = useState(tabs[0].key);\n\tconst [contacts, setContacts] = useState<ContactFull[]>([]);\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\n\tuseEffect(() => {\n\t\t// Example of requests. Will be removed after further improvements\n\t\tconst getCompanies = async () => {\n\t\t\tconst companies = await getCompaniesList(frontContext);\n\t\t\tsetCompanies(companies);\n\t\t}\n\t\tconst getContacts = async () => {\n\t\t\tconst contacts = await getContactsList(frontContext);\n\t\t\tsetContacts(contacts);\n\t\t}\n\n\t\tfrontContext && getCompanies();\n\t\tfrontContext && getContacts();\n\t}, [frontContext]);\n\n\tuseEffect(() => {\n\t\t// Need to setup Tab when we back from Item Details page or from another pages\n\t\tsetSelectedTab(location.pathname);\n\t}, []);\n\n\tconst onTabClick = (tabKey: string) => {\n\t\thistory.push(tabKey);\n\t\tsetSelectedTab(tabKey);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"primary-header\">\n\t\t\t\t<span className=\"primary-header-text\">Items</span>\n\t\t\t\t<Link to={'/create'} className=\"primary-header-link\">\n\t\t\t\t\t<Button variant=\"tertiary\" label=\"+ Create contact\" />\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<Tabs tabs={tabs} onClick={onTabClick} isSelected={selectedTab} />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/primary\">\n\t\t\t\t\t<ThisConversationTab />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/primary/search\">\n\t\t\t\t\t<SearchTab companies={companies} contacts={contacts} />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n};\n\nexport default Primary;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { PageReturnHeader } from '@frontapp/plugin-components';\nimport { ContactFull } from '../../interfaces/Contact';\nimport { CompanyFull } from '../../interfaces/Company';\nimport { displayContact, displayCompany } from '../Primary/ThisConversationTab';\nimport { useAppSelector } from '../../app/hooks';\nimport { frontContextSelector } from '../../app/frontContextSlice';\nimport { getCompaniesList, getContactsList } from '../../utils/airtableUtils';\n\nimport './styles.scss';\n\ninterface ParamTypes {\n\tid: string;\n}\n\nexport interface ContactDetailsProps {}\n\nconst ContactDetails:React.FC<ContactDetailsProps> = () => {\n\tconst { goBack } = useHistory();\n\tconst { id } = useParams<ParamTypes>();\n\tconst frontContext = useAppSelector(frontContextSelector);\n\tconst [contact, setContact] = useState<ContactFull>();\n\tconst [company, setCompany] = useState<CompanyFull>();\n\tconst [contacts, setContacts] = useState<ContactFull[]>([]);\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\n\tuseEffect(() => {\n\t\t// Example of requests. Will be removed after further improvements\n\t\tconst getCompanies = async () => {\n\t\t\tconst companies = await getCompaniesList(frontContext);\n\t\t\tsetCompanies(companies);\n\t\t}\n\t\tconst getContacts = async () => {\n\t\t\tconst contacts = await getContactsList(frontContext);\n\t\t\tsetContacts(contacts);\n\t\t}\n\n\t\tfrontContext && getCompanies();\n\t\tfrontContext && getContacts();\n\t}, [frontContext]);\n\n\tuseEffect(() => {\n\t\tconst selectedContact = contacts?.find(contact => contact.id === id);\n\t\tconst selectedCompany = companies?.find(company => selectedContact?.fields?.Company?.includes(company?.id as string));\n\t\tsetContact(selectedContact);\n\t\tsetCompany(selectedCompany);\n\t}, [contacts, companies, id]);\n\n\tconst onGoBack = () => {\n\t\tgoBack();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"details-header\">\n\t\t\t\t<PageReturnHeader onReturnClick={onGoBack} label=\"Contact details\" />\n\t\t\t</div>\n\t\t\t<div className=\"details-main-info\">\n\t\t\t\t{displayContact(contact?.fields)}\n\t\t\t\t{displayCompany(company?.fields)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ContactDetails;\n","export const ROLE_OPTIONS = [\n    \"Champion\",\n    \"Decision Maker\",\n    \"Procurement\",\n    \"Influencer\",\n]","import React, { useCallback, useMemo, useEffect, useState } from 'react';\nimport { Formik, FormikErrors, useFormikContext } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { SearchableDropdown, Footer, TextField, PageReturnHeader, SearchableDropdownItem } from '@frontapp/plugin-components';\nimport { useAppSelector } from '../../app/hooks';\nimport { CompanyFull } from '../../interfaces/Company';\nimport { ContactFull } from '../../interfaces/Contact';\nimport { ROLE_OPTIONS } from '../../consts/roles';\nimport { createContact, getCompaniesList } from '../../utils/airtableUtils';\nimport { frontContextSelector } from '../../app/frontContextSlice';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport './styles.scss';\n\n// tslint:disable-next-line\nexport interface ContactCreationProps {}\n\n// Shape of form values\ninterface FormValues {\n\tname?: string;\n\temail?: string;\n\tphone?: string;\n\tcompany: SearchableDropdownItem | null;\n\trole?: SearchableDropdownItem | null;\n}\n\nconst formValidation = (values: FormValues) => {\n\tconst errors: FormikErrors<FormValues> = {};\n\n\tif (!values.name?.length) {\n\t\terrors.name = 'The Contact Name is required.';\n\t}\n\n\tif (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(values.email as string)) {\n\t\terrors.email = 'Please enter a valid email.';\n\t}\n\n\tif (!values.email?.length) {\n\t\terrors.email = 'The Email is required.';\n\t}\n\n\treturn errors;\n};\n\nconst initialValues: FormValues = {\n\tname: '',\n\temail: '',\n\tphone: '',\n\tcompany: null,\n\trole: null,\n};\n\nconst ContactCreation: React.FC<ContactCreationProps> = () => {\n\tconst { goBack } = useHistory();\n\tconst frontContext = useAppSelector(frontContextSelector);\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\n\tuseEffect(() => {\n\t\t// Example of requests. Will be removed after further improvements\n\t\tconst getCompanies = async () => {\n\t\t\tconst companies = await getCompaniesList(frontContext);\n\t\t\tsetCompanies(companies);\n\t\t}\n\n\t\tfrontContext && getCompanies();\n\t}, [frontContext]);\n\n\tconst onSubmit = useCallback(async (values) => {\n\t\tconst dataToPass: ContactFull[] = [{\n\t\t\tfields: {\n\t\t\t\t\"Full Name\": values.name,\n\t\t\t\t\"Email\": values.email,\n\t\t\t\t\"Phone\": values.phone\n\t\t\t}\n\t\t}];\n\t\tif (values.company?.key) {\n\t\t\tdataToPass[0].fields.Company = [values.company?.key];\n\t\t}\n\t\tif (values.role?.key) {\n\t\t\tdataToPass[0].fields.Role = [values.role?.key];\n\t\t}\n\t\tawait createContact(frontContext, dataToPass);\n\n\t\ttoast.success('Contact created!', {\n\t\t\tposition: toast.POSITION.TOP_RIGHT,\n\t\t\tautoClose: 5000\n\t\t});\n\t},[frontContext]);\n\n\treturn (\n\t\t<div className=\"contact-creation-wrapper\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tvalidate={formValidation}\n\t\t\t\tonSubmit={onSubmit}\n\t\t\t>\n\t\t\t\t{({\n\t\t\t\t\tvalues,\n\t\t\t\t\thandleSubmit,\n\t\t\t\t\tisValid,\n\t\t\t\t\tdirty,\n\t\t\t\t\tsetFieldValue,\n\t\t\t\t\tsetTouched,\n\t\t\t\t\terrors,\n\t\t\t\t\ttouched,\n\t\t\t\t}) => (<>\n\t\t\t\t\t<div className=\"contact-creation-body\">\n\t\t\t\t\t\t<PageReturnHeader label=\"Create new\" onReturnClick={goBack} className=\"contact-creation-prh\" />\n\t\t\t\t\t\t<h2 className=\"contact-creation-title\">Create new contact</h2>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\t\t\t\tvalue={values.name}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact name\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('name', name)}\n\t\t\t\t\t\t\t\tonBlur={() => setTouched({ ...touched, name: true }, true)}\n\t\t\t\t\t\t\t\terrorText={errors.name && touched.name ? errors.name : ''}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\t\tvalue={values.email}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact email\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('email', name)}\n\t\t\t\t\t\t\t\tonBlur={() => setTouched({ ...touched, email: true }, true)}\n\t\t\t\t\t\t\t\terrorText={errors.email && touched.email ? errors.email : ''}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tlabel=\"Phone\"\n\t\t\t\t\t\t\t\tvalue={values.phone}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact phone\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('phone', name)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ItemCompany companies={companies} />\n\t\t\t\t\t\t<ItemRole />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Footer\n\t\t\t\t\t\tisPrimaryDisabled={!isValid || !dirty}\n\t\t\t\t\t\tprimaryLabel=\"Create\"\n\t\t\t\t\t\tonPrimaryClick={handleSubmit}\n\t\t\t\t\t\tsecondaryLabel=\"Cancel\"\n\t\t\t\t\t\tonSecondaryClick={goBack}\n\t\t\t\t\t/>\n\t\t\t\t</>)}\n\t\t\t</Formik>\n\t\t\t<ToastContainer />\n\t\t</div>\n\t);\n};\n\ninterface ItemCompanyProps {\n\tcompanies: CompanyFull[];\n}\n\nconst ItemCompany: React.FC<ItemCompanyProps> = ({ companies }) => {\n\t// const dispatch = useAppDispatch();\n\tconst { values, setFieldValue } = useFormikContext<FormValues>();\n\t// TODO: get from store all companies (useAppSelector(companiesSelector);)\n\t// useMemo - temporary\n\tconst companyOptions: SearchableDropdownItem[] = useMemo(() => {\n\t\treturn companies.map(company => ({key: company.id as string, label: company.fields.Company as string}))\n\t}, [companies]);\n\n\tconst handleSelectCompany = (value: SearchableDropdownItem) => {\n\t\tsetFieldValue('company', value);\n\t};\n\n\treturn <div className=\"contact-company-wrapper\">\n\t\t<SearchableDropdown\n\t\t\tonSelectValue={handleSelectCompany}\n\t\t\ttitle=\"Company\"\n\t\t\tplaceholder=\"Select company\"\n\t\t\toptions={companyOptions}\n\t\t\tvalue={values.company}\n\t\t/>\n\t</div>;\n};\n\nconst ItemRole = () => {\n\t// const dispatch = useAppDispatch();\n\tconst { values, setFieldValue } = useFormikContext<FormValues>();\n\tconst roleOptions = useMemo(() => {\n\t\treturn ROLE_OPTIONS.map(role => ({key: role, label: role}))\n\t}, []);\n\n\tconst handleSelectRole = (value: SearchableDropdownItem) => {\n\t\tsetFieldValue('role', value);\n\t};\n\n\treturn <div className=\"contact-role-wrapper\">\n\t\t<SearchableDropdown\n\t\t\tonSelectValue={handleSelectRole}\n\t\t\ttitle=\"Role\"\n\t\t\tplaceholder=\"Select role\"\n\t\t\toptions={roleOptions}\n\t\t\tvalue={values.role}\n\t\t/>\n\t</div>;\n};\n\nexport default ContactCreation;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, TextField } from '@frontapp/plugin-components';\nimport { checkBaseId } from '../../utils/airtableUtils';\nimport { useAppSelector } from '../../app/hooks';\nimport { frontContextSelector } from '../../app/frontContextSlice';\nimport { setBaseId as setBaseIdGlobal } from '../../utils/helpers';\n\nimport './styles.scss';\n\nexport interface SignInProps {}\n\nconst SignIn: React.FC<SignInProps> = () => {\n\tconst history = useHistory();\n\tconst [baseId, setBaseId] = useState('');\n\tconst [errorMessage, setErrorMessage] = useState('');\n\tconst frontContext = useAppSelector(frontContextSelector);\n\n\tconst handleSignInClick = async () => {\n\t\tconst checkStatus = await checkBaseId(frontContext, baseId);\n\n\t\tif (checkStatus) {\n\t\t\tsetBaseIdGlobal(baseId);\n\t\t\thistory.push('/primary');\n\t\t} else {\n\t\t\tsetErrorMessage('The base id isn\\'t correct');\n\t\t}\n\t};\n\n\tconst handleChangeTextField = (value: string) => {\n\t\tsetBaseId(value);\n\t\terrorMessage.length && setErrorMessage('');\n\t};\n\n\treturn <div className=\"sign-in-wrapper\">\n\t\t<div className=\"sign-in-content\">\n\t\t\t<TextField label=\"Airtable Base Id\" placeholder=\"Base Id\" onChange={handleChangeTextField} value={baseId} isRequired={true} errorText={errorMessage} />\n\t\t\t<p className=\"sign-in-description \">Place enter your Airtable Base Id to continue work with the app.</p>\n\t\t\t<Button label=\"Sign in\" className=\"sign-in-button\" onClick={handleSignInClick} />\n\t\t</div>\n\t</div>;\n};\n\nexport default SignIn;\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Primary from '../views/Primary';\nimport ItemDetails from '../views/ContactDetails';\nimport ItemCreation from '../views/ContactCreation';\nimport SignIn from '../views/SignIn';\n\nimport Front from '@frontapp/plugin-sdk';\nimport { useAppDispatch } from './hooks';\nimport { setFrontContext } from './frontContextSlice';\n\nfunction App() {\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tconst subscription = Front.contextUpdates.subscribe(newContext => dispatch(setFrontContext(newContext)));\n\t\treturn () => subscription.unsubscribe();\n\t}, [dispatch]);\n\n\treturn (\n\t\t<Router basename=\"/front-plugin-demo\">\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/create\">\n\t\t\t\t\t<ItemCreation/>\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/items/:id\">\n\t\t\t\t\t<ItemDetails/>\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/primary\">\n\t\t\t\t\t<Primary />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t<SignIn/>\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Contact } from '../interfaces/Contact';\nimport { RootState } from './store';\n\nconst createContactMethod = () => Promise.resolve([]);\n\ninterface ContactId {\n\t[key: string]: Contact;\n}\n\nexport interface ContactsIds {\n\t[key: string]: Contact[];\n}\n\nexport const createContact = createAsyncThunk('contacts/createContact', async (data, { rejectWithValue, dispatch }) => {\n\ttry {\n\t\treturn createContactMethod();\n\t} catch (err) {\n\t\t// @ts-ignore\n\t\treturn rejectWithValue(err.response.data);\n\t}\n});\n\ninterface ContactsState {\n\tentities: Contact[],\n\tcontactsIds: ContactId;\n\tcontactsByWorkspaceId: ContactsIds;\n}\n\nconst initialState: ContactsState = {\n\tentities: [],\n\tcontactsIds: {},\n\tcontactsByWorkspaceId: {},\n};\n\nexport const contactsSlice = createSlice({\n\tname: 'contacts',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {},\n});\n\nexport const contactsSelector = (state: RootState): Contact[] => state.contacts.entities;\nexport const contactsByIdsSelector = (state: RootState): ContactId => state.contacts.contactsIds;\nexport const contactsByWorkspaceIdSelector = (state: RootState): ContactsIds => state.contacts.contactsByWorkspaceId;\n\nexport default contactsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport contactsReducer from './contactsSlice';\nimport frontContextReducer from './frontContextSlice';\n\nexport const store = configureStore({\n\treducer: {\n\t\tcontacts: contactsReducer,\n\t\tfront: frontContextReducer\n\t},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}