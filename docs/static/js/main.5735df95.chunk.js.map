{"version":3,"sources":["utils/helpers.ts","app/hooks.ts","app/frontContextSlice.ts","utils/airtableUtils.ts","views/Primary/ThisConversationTab/index.tsx","components/ContactCard/index.tsx","views/Primary/SearchTab/index.tsx","views/Primary/index.tsx","views/ContactDetails/index.tsx","consts/roles.ts","views/ContactCreation/index.tsx","app/App.tsx","app/contactsSlice.ts","app/store.ts","index.tsx"],"names":["config","useAppDispatch","useDispatch","useAppSelector","useSelector","FrontContextSlice","createSlice","name","initialState","frontContext","reducers","setFrontContext","state","action","payload","actions","frontContextSelector","front","getSecret","key","configPath","process","CONFIG_PATH","JSON","parse","fs","readFileSync","dotenvConfig","API_ENDPOINT","getHeaders","requestWrapper","url","method","data","a","axios","get","params","headers","result","post","records","getCompaniesList","getContactsList","displayRow","title","value","className","displayContact","contact","Email","Phone","Role","join","Title","displayCompany","company","Company","Website","Address","Industry","Employees","Segment","Renewal","ThisConversationTab","useState","contacts","setContacts","companies","setCompanies","contactOptions","setContactOptions","selectedContact","selectContact","handleSelectContact","option","item","find","id","getData","contactNames","map","c","fields","useEffect","undefined","listMessages","then","r","allConversationContacts","results","flatMap","m","to","t","handle","from","cc","bcc","b","filter","index","self","indexOf","catch","dropdownOptions","label","length","companiesToBeDisplayed","Contacts","includes","isRequired","autoWidth","onSelectValue","placeholder","options","icon","ContactCard","history","useHistory","width","onClick","push","goToItem","SearchTab","searchValue","setSearchValue","contactsToDisplay","useMemo","toLowerCase","onChange","itemName","isClearIconNeeded","tabs","Primary","location","useLocation","selectedTab","setSelectedTab","pathname","variant","tabKey","isSelected","exact","path","ContactDetails","goBack","useParams","setContact","setCompany","selectedCompany","onReturnClick","ROLE_OPTIONS","formValidation","values","errors","test","email","initialValues","phone","role","ItemCompany","useFormikContext","setFieldValue","companyOptions","ItemRole","roleOptions","ContactCreation","onContactCreate","dispatch","onSubmit","useCallback","dataToPass","createdContacts","toast","success","position","POSITION","TOP_RIGHT","autoClose","validate","handleSubmit","isValid","dirty","setTouched","touched","onBlur","errorText","isPrimaryDisabled","primaryLabel","onPrimaryClick","secondaryLabel","onSecondaryClick","App","subscription","Front","contextUpdates","subscribe","newContext","unsubscribe","getCompanies","getContacts","basename","render","contactsSlice","createAsyncThunk","rejectWithValue","Promise","resolve","response","entities","contactsIds","contactsByWorkspaceId","extraReducers","builder","store","configureStore","reducer","contactsReducer","frontContextReducer","ReactDOM","StrictMode","document","getElementById"],"mappings":"qQAIIA,E,wGCASC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,QCyBlDC,EAAoBC,YAAY,CAC5CC,KAAM,eACNC,aAL2D,CAC3DC,aAAc,MAKdC,SAAU,CACTC,gBADS,SACOC,EAAOC,GACtBD,EAAMH,aAAeI,EAAOC,YAKhBH,EAAoBN,EAAkBU,QAAtCJ,gBAEFK,EAAuB,SAACJ,GAAD,OAA4CA,EAAMK,MAAMR,cAE7EJ,IAAf,Q,kDFlCO,SAASa,EAAUC,GACtB,IAAMC,EAAaC,iOAAYC,YAC/B,OAAKF,GAGApB,IACDA,EAASuB,KAAKC,MAAMC,IAAGC,aAAaN,EAAsB,WAIvDpB,EAAOmB,IAPHE,iOAAYF,GAV3BQ,mBGEA,IAAMC,EAAY,sCAAkCV,EAAU,qBAA5C,KAIZW,EAAa,iBAAO,CAClB,eAAgB,mBAChB,cAJc,iBAAgBX,EAAU,wBAY1CY,EAAc,uCAAG,WAAOC,EAAaC,EAAoBC,GAAxC,mBAAAC,EAAA,yDAGJ,QAAXF,EAHe,gCAIAG,IAAMC,IAAIR,EAAeG,EAAK,CAACM,OAAQJ,EAAMK,QAAST,MAJtD,OAIfU,EAJe,iCAKG,SAAXP,EALQ,iCAMAG,IAAMK,KAAKZ,EAAeG,EAAKE,EAAM,CAACK,QAAST,MAN/C,OAMfU,EANe,kDASZA,SATY,iBASZ,EAAQN,YATI,aASZ,EAAcQ,SATF,4CAAH,0DAYPC,EAAmB,SAACT,GAC7B,OAAOH,EAAe,YAAa,MAAOG,IAGjCU,EAAkB,SAACV,GAC5B,OAAOH,EAAe,WAAY,MAAOG,I,OC1BvCW,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAAuDA,EAAQ,qCACjF,qBAAKC,UAAU,qCAAf,SAAqDF,IACrD,qBAAKE,UAAU,sCAAf,SAAsDD,OACjD,MAEOE,EAAiB,SAACC,GAAuB,IAAD,EACpD,OAAOA,EAAU,qCAChB,qBAAKF,UAAU,wBAAf,SAAwCE,EAAQ,eAC/CL,EAAW,CAAEC,MAAO,QAASC,MAAOG,EAAQC,QAC5CN,EAAW,CAAEC,MAAO,QAASC,MAAOG,EAAQE,QAC5CP,EAAW,CAAEC,MAAO,OAAQC,MAAK,UAAEG,EAAQG,YAAV,aAAE,EAAcC,KAAK,QACtDT,EAAW,CAAEC,MAAO,QAASC,MAAOG,EAAQK,WACxC,MAGMC,EAAiB,SAACC,GAC9B,OAAOA,EAAU,qCAChB,qBAAKT,UAAU,wBAAf,SAAwCS,EAAQC,UAC/Cb,EAAW,CAAEC,MAAO,UAAWC,MAAOU,EAAQE,UAC9Cd,EAAW,CAAEC,MAAO,UAAWC,MAAOU,EAAQG,UAC9Cf,EAAW,CAAEC,MAAO,WAAYC,MAAOU,EAAQI,WAC/ChB,EAAW,CAAEC,MAAO,YAAaC,MAAOU,EAAQK,YAChDjB,EAAW,CAAEC,MAAO,iBAAkBC,MAAOU,EAAQ,oBACrDZ,EAAW,CAAEC,MAAO,UAAWC,MAAOU,EAAQM,UAC9ClB,EAAW,CAAEC,MAAO,wBAAyBC,MAAOU,EAAQO,aACxD,MAoFQC,EAjFa,WAE3B,IAAMvD,EAAeN,EAAea,GAEpC,EAAgCiD,mBAAwB,IAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEA,EAAkCF,mBAAwB,IAA1D,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAA4CJ,mBAAmC,IAA/E,mBAAOK,EAAP,KAAuBC,EAAvB,KAEA,EAAyCN,qBAAzC,mBAAOO,EAAP,KAAwBC,EAAxB,KAEMC,EAAsB,SAACC,GAC5B,IAAMC,EAAOV,EAASW,MAAK,SAAA5B,GAAO,OAAIA,EAAQ6B,KAAOH,EAAOxD,OACxDyD,GACHH,EAAcG,IAIVG,EAAO,uCAAG,WAAOC,GAAP,iBAAA9C,EAAA,6DAEf8C,EAAe,CAAC,gBAAgB,gBAFjB,SAGQrC,EAAgB,CAAC,gBAAkB,MAAlB,OAAyBqC,EAAaC,KAAI,SAAA1E,GAAI,6BAAoBA,EAApB,QAA9C,OAHzB,cAGT2D,EAHS,gBAISxB,EAAiB,CAAC,gBAAkB,MAAlB,OAAyBwB,EAASe,KAAI,SAACC,GAAD,sBAAqBA,EAAEC,OAAO,aAA9B,gCAAtC,OAJ3B,OAITf,EAJS,OAMfD,EAAYD,GACZG,EAAaD,GAPE,2CAAH,sDAYbgB,qBAAU,WACT,IAAK3E,QAA8C4E,IAA9B5E,EAAa6E,aAGjC,OAFAnB,EAAY,SACZE,EAAa,IAGd5D,EAAa6E,eAAeC,MAAK,SAAAC,GAChC,IAAMC,EAAqCD,EAAEE,QAAQC,SAAQ,SAAAC,GAAC,sCAASA,EAAEC,GAAGZ,KAAI,SAAAa,GAAC,OAAIA,EAAEC,WAAzB,WAAmCH,EAAEI,YAArC,aAAmC,EAAQD,QAA3C,aAAuD,UAAAH,EAAEK,UAAF,eAAMhB,KAAI,SAAAC,GAAC,OAAIA,EAAEa,YAAW,IAAnF,aAA4F,UAAAH,EAAEM,WAAF,eAAOjB,KAAI,SAAAkB,GAAC,OAAIA,EAAEJ,YAAW,QACrLK,QAAO,SAACtD,EAAOuD,EAAOC,GAAf,OAAwBA,EAAKC,QAAQzD,KAAWuD,KAEzD,OAAOtB,EAAQU,MAEfe,OAAM,WACNrC,EAAY,IACZE,EAAa,SAEZ,CAAC5D,IAEJ2E,qBAAU,WACT,IAAMqB,EAAkBvC,EAASe,KAAI,SAAAhC,GAAO,MAAK,CAAE9B,IAAK8B,EAAQ6B,GAAc4B,MAAOzD,EAAQkC,OAAO,iBACpGZ,EAAkBkC,GAElBA,EAAgBE,OAASjC,EAAoB+B,EAAgB,IAAMhC,EAAc,QAC/E,CAACP,IAEJ,IAAM0C,EAAyBpC,EAAkBJ,EAAUgC,QAAO,SAAAlB,GAAC,sBAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAGC,cAAP,iBAAI,EAAW0B,gBAAf,aAAI,EAAqBC,SAArB,OAA8BtC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAiBM,OAAeG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAU,GAE1J,OAAO,sBAAKpC,UAAU,4BAAf,UACN,qBAAKA,UAAU,2BAAf,SACC,qBAAKA,UAAU,6BAAf,SACC,cAAC,qBAAD,CACCgE,YAAY,EACZC,WAAW,EACXC,cAAevC,EACf7B,MAAM,UACNqE,YAAY,iBACZC,QAAS7C,EACTxB,MAAO,CAAE3B,IAAG,OAAEqD,QAAF,IAAEA,OAAF,EAAEA,EAAiBM,GAAc4B,MAAK,OAAElC,QAAF,IAAEA,OAAF,EAAEA,EAAiBW,OAAO,cAC5EiC,KAAM,cAAC,eAAD,UAIR5C,GAAmB,sBAAKzB,UAAU,oBAAf,UAClBC,EAAewB,EAAgBW,QAE/ByB,EAAuB3B,KAAI,SAACC,GAAD,OAAiB3B,EAAe2B,aCxEhDmC,G,OA5BiC,SAAC,GAAqB,IAAnBpE,EAAkB,EAAlBA,QAAU6B,EAAQ,EAARA,GACtDwC,EAAUC,cAMhB,OACC,eAAC,WAAD,CAAU1E,MAAOI,EAAQ,aAAcuE,MAAO,OAAQzE,UAAU,eAAe0E,QAAS,kBALxE,SAAC3C,GACjBwC,EAAQI,KAAR,iBAAuB5C,IAIuE6C,CAAS7C,IAAvG,UAEE7B,EAAO,MAAY,qBAAKF,UAAU,yBAAf,SAClB,sBAAMA,UAAU,2BAAhB,SAA4CE,EAAO,UAC3C,KAGTA,EAAO,MAAW,qBAAKF,UAAU,yBAAf,SACjB,sBAAMA,UAAU,2BAAhB,SAA4CE,EAAO,UAC3C,KAGTA,EAAO,MAAY,qBAAKF,UAAU,yBAAf,SAClB,sBAAMA,UAAU,2BAAhB,SAA4CE,EAAO,UAC3C,UCOE2E,G,OA9B4B,SAAC,GAAgB,IAAf1D,EAAc,EAAdA,SAC5C,EAAsCD,mBAAiB,IAAvD,mBAAO4D,EAAP,KAAoBC,EAApB,KAEMC,EAAmCC,mBAAQ,WAChD,OAAO9D,EACLkC,QAAO,wBAAGjB,EAAH,EAAGA,OAAH,OAAgB,UAAAA,EAAO,oBAAP,mBAAqB8C,qBAArB,eAAoCnB,SAASe,EAAYI,kBAAzD,UAA2E9C,EAAM,aAAjF,iBAA2E,EAAiB8C,qBAA5F,aAA2E,EAAgCnB,SAASe,EAAYI,qBACvJ,CAAC/D,EAAU2D,IAMd,OAAO,sBAAK9E,UAAU,qBAAf,UACN,cAAC,cAAD,CAAaA,UAAU,+BAA+B2D,MAAM,wBAAwBQ,YAAY,kCAAkCgB,SAL1G,SAACC,GACzBL,EAAeK,IAI+IC,mBAAmB,IAEhLP,GACC,sBAAK9E,UAAU,+BAAf,+BACe8E,EADf,YAMDE,EAAkBpB,OAAS,GAAKoB,EAAkB9C,KAAI,gBAAGE,EAAH,EAAGA,OAAQL,EAAX,EAAWA,GAAX,OAAoB,cAAC,EAAD,CAAa7B,QAASkC,EAAkCL,GAAIA,GAAzBK,EAAO,iBAGvF,IAA7B4C,EAAkBpB,UAAkBkB,GAAe,cAAC,YAAD,CAAW9E,UAAU,oCC3BrEsF,G,OAAO,CACZ,CACC3B,MAAO,oBACPvF,IAAK,YAEN,CACCuF,MAAO,SACPvF,IAAK,qBA6CQmH,EApCyB,SAAC,GAA6B,IAA3BpE,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,UAC9CkD,EAAUC,cACVgB,EAAWC,cACjB,EAAsCvE,mBAASoE,EAAK,GAAGlH,KAAvD,mBAAOsH,EAAP,KAAoBC,EAApB,KAEAtD,qBAAU,WAETsD,EAAeH,EAASI,YACtB,IAOH,OACC,gCACC,sBAAK5F,UAAU,iBAAf,UACC,sBAAMA,UAAU,sBAAhB,mBACA,cAAC,IAAD,CAAM8C,GAAI,UAAW9C,UAAU,sBAA/B,SACC,cAAC,SAAD,CAAQ6F,QAAQ,WAAWlC,MAAM,0BAGnC,cAAC,OAAD,CAAM2B,KAAMA,EAAMZ,QAbD,SAACoB,GACnBvB,EAAQI,KAAKmB,GACbH,EAAeG,IAWyBC,WAAYL,IACnD,eAAC,IAAD,WACC,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,WAAlB,SACC,cAAC,EAAD,MAED,cAAC,IAAD,CAAOA,KAAK,kBAAZ,SACC,cAAC,EAAD,CAAW5E,UAAWA,EAAWF,SAAUA,aCRjC+E,G,OA9BsC,SAAC,GAA2B,IAA1B/E,EAAyB,EAAzBA,SAAUE,EAAe,EAAfA,UACxD8E,EAAW3B,cAAX2B,OACApE,EAAOqE,cAAPrE,GACR,EAA8Bb,qBAA9B,mBAAOhB,EAAP,KAAgBmG,EAAhB,KACA,EAA8BnF,qBAA9B,mBAAOT,EAAP,KAAgB6F,EAAhB,KAEAjE,qBAAU,WACT,IAAMZ,EAAe,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAUW,MAAK,SAAA5B,GAAO,OAAIA,EAAQ6B,KAAOA,KAC3DwE,EAAe,OAAGlF,QAAH,IAAGA,OAAH,EAAGA,EAAWS,MAAK,SAAArB,GAAO,sBAAIgB,QAAJ,IAAIA,GAAJ,UAAIA,EAAiBW,cAArB,iBAAI,EAAyB1B,eAA7B,aAAI,EAAkCqD,SAAlC,OAA2CtD,QAA3C,IAA2CA,OAA3C,EAA2CA,EAASsB,OACvGsE,EAAW5E,GACX6E,EAAWC,KACT,CAACpF,EAAUE,EAAWU,IAMzB,OACC,qCACC,qBAAK/B,UAAU,iBAAf,SACC,cAAC,mBAAD,CAAkBwG,cAPJ,WAChBL,KAM6CxC,MAAM,sBAElD,sBAAK3D,UAAU,oBAAf,UACEC,EAAc,OAACC,QAAD,IAACA,OAAD,EAACA,EAASkC,QACxB5B,EAAc,OAACC,QAAD,IAACA,OAAD,EAACA,EAAS2B,gB,wBC1ChBqE,EAAe,CACxB,WACA,iBACA,cACA,cCyBEC,G,cAAiB,SAACC,GAAwB,IAAD,IACxCC,EAAmC,GAczC,OAZI,UAACD,EAAOnJ,YAAR,aAAC,EAAaoG,UACjBgD,EAAOpJ,KAAO,iCAGV,yCAAyCqJ,KAAKF,EAAOG,SACzDF,EAAOE,MAAQ,gCAGZ,UAACH,EAAOG,aAAR,aAAC,EAAclD,UAClBgD,EAAOE,MAAQ,0BAGTF,IAGFG,EAA4B,CACjCvJ,KAAM,GACNsJ,MAAO,GACPE,MAAO,GACPvG,QAAS,KACTwG,KAAM,MAqGDC,EAA0C,SAAC,GAAmB,IAAjB7F,EAAgB,EAAhBA,UAElD,EAAkC8F,cAA1BR,EAAR,EAAQA,OAAQS,EAAhB,EAAgBA,cAGVC,EAA2CpC,mBAAQ,WACxD,OAAO5D,EAAUa,KAAI,SAAAzB,GAAO,MAAK,CAACrC,IAAKqC,EAAQsB,GAAc4B,MAAOlD,EAAQ2B,OAAO1B,cACjF,CAACW,IAMJ,OAAO,qBAAKrB,UAAU,0BAAf,SACN,cAAC,qBAAD,CACCkE,cAN0B,SAACnE,GAC5BqH,EAAc,UAAWrH,IAMxBD,MAAM,UACNqE,YAAY,iBACZC,QAASiD,EACTtH,MAAO4G,EAAOlG,aAKX6G,EAAW,WAEhB,MAAkCH,cAA1BR,EAAR,EAAQA,OAAQS,EAAhB,EAAgBA,cACVG,EAActC,mBAAQ,WAC3B,OAAOwB,EAAavE,KAAI,SAAA+E,GAAI,MAAK,CAAC7I,IAAK6I,EAAMtD,MAAOsD,QAClD,IAMH,OAAO,qBAAKjH,UAAU,uBAAf,SACN,cAAC,qBAAD,CACCkE,cANuB,SAACnE,GACzBqH,EAAc,OAAQrH,IAMrBD,MAAM,OACNqE,YAAY,cACZC,QAASmD,EACTxH,MAAO4G,EAAOM,UAKFO,EAhJyC,SAAC,GAAoC,IAAlCnG,EAAiC,EAAjCA,UAAWoG,EAAsB,EAAtBA,gBAC7DtB,EAAW3B,cAAX2B,OACFuB,EAAWxK,IAEXyK,EAAWC,sBAAW,uCAAC,WAAOjB,GAAP,yBAAAxH,EAAA,6DACtB0I,EAA4B,CAAC,CAClCzF,OAAQ,CACP,YAAauE,EAAOnJ,KACpB,MAASmJ,EAAOG,MAChB,MAASH,EAAOK,UAGlB,UAAIL,EAAOlG,eAAX,aAAI,EAAgBrC,OACnByJ,EAAW,GAAGzF,OAAO1B,QAAU,WAACiG,EAAOlG,eAAR,aAAC,EAAgBrC,OAEjD,UAAIuI,EAAOM,YAAX,aAAI,EAAa7I,OAChByJ,EAAW,GAAGzF,OAAO/B,KAAO,WAACsG,EAAOM,YAAR,aAAC,EAAa7I,MAZf,SPnBnBW,EAAe,WAAY,OAAQ,CAACW,QOiCDmI,IAdhB,OActBC,EAdsB,OAe5BL,EAAgBK,GAEhBC,IAAMC,QAAQ,mBAAoB,CACjCC,SAAUF,IAAMG,SAASC,UACzBC,UAAW,MAnBgB,2CAAD,sDAqB1B,CAACV,EAAUvB,IAEb,OACC,sBAAKnG,UAAU,2BAAf,UACC,cAAC,IAAD,CACC+G,cAAeA,EACfsB,SAAU3B,EACViB,SAAUA,EAHX,SAKE,gBACAhB,EADA,EACAA,OACA2B,EAFA,EAEAA,aACAC,EAHA,EAGAA,QACAC,EAJA,EAIAA,MACApB,EALA,EAKAA,cACAqB,EANA,EAMAA,WACA7B,EAPA,EAOAA,OACA8B,EARA,EAQAA,QARA,OASM,qCACN,sBAAK1I,UAAU,wBAAf,UACC,cAAC,mBAAD,CAAkB2D,MAAM,aAAa6C,cAAeL,EAAQnG,UAAU,yBACtE,oBAAIA,UAAU,yBAAd,gCACA,qBAAKA,UAAU,wBAAf,SACC,cAAC,YAAD,CACCgE,YAAY,EACZL,MAAM,OACN5D,MAAO4G,EAAOnJ,KACd2G,YAAY,eACZgB,SAAU,SAAC3H,GAAD,OAAkB4J,EAAc,OAAQ5J,IAClDmL,OAAQ,kBAAMF,EAAW,2BAAKC,GAAN,IAAelL,MAAM,KAAQ,IACrDoL,UAAWhC,EAAOpJ,MAAQkL,EAAQlL,KAAOoJ,EAAOpJ,KAAO,OAGzD,qBAAKwC,UAAU,wBAAf,SACC,cAAC,YAAD,CACCgE,YAAY,EACZL,MAAM,QACN5D,MAAO4G,EAAOG,MACd3C,YAAY,gBACZgB,SAAU,SAAC3H,GAAD,OAAkB4J,EAAc,QAAS5J,IACnDmL,OAAQ,kBAAMF,EAAW,2BAAKC,GAAN,IAAe5B,OAAO,KAAQ,IACtD8B,UAAWhC,EAAOE,OAAS4B,EAAQ5B,MAAQF,EAAOE,MAAQ,OAG5D,qBAAK9G,UAAU,wBAAf,SACC,cAAC,YAAD,CACC2D,MAAM,QACN5D,MAAO4G,EAAOK,MACd7C,YAAY,gBACZgB,SAAU,SAAC3H,GAAD,OAAkB4J,EAAc,QAAS5J,QAGrD,cAAC,EAAD,CAAa6D,UAAWA,IACxB,cAAC,EAAD,OAED,cAAC,SAAD,CACCwH,mBAAoBN,IAAYC,EAChCM,aAAa,SACbC,eAAgBT,EAChBU,eAAe,SACfC,iBAAkB9C,UAIrB,cAAC,IAAD,Q,SC/EY+C,OAnDf,WACC,MAAkChI,mBAAwB,IAA1D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAwB,IAAxD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMsG,EAAWxK,IA0BjB,OAxBAmF,qBAAU,WACT,IAAM8G,EAAeC,WAAMC,eAAeC,WAAU,SAAAC,GAAU,OAAI7B,EAAS9J,EAAgB2L,OAC3F,OAAO,kBAAMJ,EAAaK,iBACxB,IAEHnH,qBAAU,WAET,IAAMoH,EAAY,uCAAG,4BAAAtK,EAAA,sEACIQ,IADJ,OACd0B,EADc,OAEpBC,EAAaD,GAFO,2CAAH,qDAIZqI,EAAW,uCAAG,4BAAAvK,EAAA,sEACIS,IADJ,OACbuB,EADa,OAEnBC,EAAYD,GAFO,2CAAH,qDAKjBsI,IACAC,MACE,IAOF,cAAC,IAAD,CAAQC,SAAS,qBAAjB,SACC,eAAC,IAAD,WACC,cAAC,IAAD,CACC3D,OAAK,EACLC,KAAK,IACL2D,OAAQ,kBAAM,cAAC,IAAD,CAAU9G,GAAG,gBAE5B,cAAC,IAAD,CAAOmD,KAAK,UAAZ,SACC,cAAC,EAAD,CAAc5E,UAAWA,EAAWoG,gBAbhB,SAACK,GACxB1G,EAAY,GAAD,mBAAK0G,GAAL,YAAyB3G,UAclC,cAAC,IAAD,CAAO8E,KAAK,aAAZ,SACC,cAAC,EAAD,CAAa5E,UAAWA,EAAWF,SAAUA,MAE9C,cAAC,IAAD,CAAO8E,KAAK,WAAZ,SACC,cAAC,EAAD,CAAS5E,UAAWA,EAAWF,SAAUA,YCZ/B0I,IAhCcC,YAAiB,yBAAD,uCAA2B,WAAO5K,EAAP,kBAAAC,EAAA,6DAAe4K,EAAf,EAAeA,gBAAf,EAAgCrC,SAAhC,2BAVtCsC,QAAQC,QAAQ,KAUsB,yDAK/DF,EAAgB,KAAIG,SAAShL,OALkC,wDAA3B,yDAqBhB3B,YAAY,CACxCC,KAAM,WACNC,aARmC,CACnC0M,SAAU,GACVC,YAAa,GACbC,sBAAuB,IAMvB1M,SAAU,GACV2M,cAAe,SAACC,OAOjB,SC1CaC,GAAQC,YAAe,CACnCC,QAAS,CACRvJ,SAAUwJ,GACVzM,MAAO0M,K,OCCTC,IAASjB,OACR,cAAC,IAAMkB,WAAP,UACC,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACC,cAAC,GAAD,QAGFO,SAASC,eAAe,U","file":"static/js/main.5735df95.chunk.js","sourcesContent":["import fs from \"fs\";\nimport { config as dotenvConfig } from 'dotenv';\n\ndotenvConfig();\nlet config: (string|number)[];\n/**\n * Get a secret value from encrypted volume (for prod)\n * or from the environment (for local)\n * @param key Name of secret\n */\nexport function getSecret(key: string): string {\n    const configPath = process.env.CONFIG_PATH;\n    if (!configPath)\n        return process.env[key] as string;\n\n    if (!config) {\n        config = JSON.parse(fs.readFileSync(configPath as string, 'utf-8'));\n    }\n\n    // @ts-ignore\n    return config[key] as string;\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from \"./store\";\n\nexport interface FrontContext {\n\tconversation?: {\n\t\trecipient: {\n\t\t\thandle: string;\n\t\t}\n\t};\n\tlistMessages: () => Promise<{\n\t\tresults: {\n\t\t\tto: [{\n\t\t\t\thandle: string\n\t\t\t}],\n\t\t\tfrom: {\n\t\t\t\thandle: string\n\t\t\t},\n\t\t\tcc: [{\n\t\t\t\thandle: string\n\t\t\t}],\n\t\t\tbcc: [{\n\t\t\t\thandle: string\n\t\t\t}]\n\t\t}[]\n\t}>;\n}\n\nconst initialState: { frontContext: FrontContext | null } = {\n\tfrontContext: null\n}\nexport const FrontContextSlice = createSlice({\n\tname: 'frontContext',\n\tinitialState,\n\treducers: {\n\t\tsetFrontContext(state, action: PayloadAction<any>) {\n\t\t\tstate.frontContext = action.payload;\n\t\t}\n\t}\n});\n\nexport const { setFrontContext } = FrontContextSlice.actions;\n\nexport const frontContextSelector = (state: RootState):  FrontContext | null => state.front.frontContext\n\nexport default FrontContextSlice.reducer;\n","import axios from \"axios\";\nimport {getSecret} from \"./helpers\";\nimport { CompanyFull } from \"../interfaces/Company\";\nimport { ContactFull } from \"../interfaces/Contact\";\n\nconst API_ENDPOINT = `https://api.airtable.com/v0/${getSecret('REACT_APP_BASE_ID')}/`;\n\nconst getUserApiKey = () => `Bearer ${getSecret('REACT_APP_API_KEY')}`;\n\nconst getHeaders = () => ({\n        'Content-Type': 'application/json',\n        'Authorization': getUserApiKey()\n});\n\ntype MethodType = 'get' | 'post';\ntype DataType = {\n    [key: string]: any\n}\n\nconst requestWrapper = async (url: string, method: MethodType, data?: DataType | null) => {\n    let result;\n\n    if (method === 'get') {\n        result = await axios.get(API_ENDPOINT + url, {params: data, headers: getHeaders()})\n    } else if (method === 'post') {\n        result = await axios.post(API_ENDPOINT + url, data, {headers: getHeaders()})\n    }\n\n    return result?.data?.records;\n}\n\nexport const getCompaniesList = (data?: DataType): Promise<CompanyFull[]> => {\n    return requestWrapper('Companies', 'get', data);\n}\n\nexport const getContactsList = (data?: DataType): Promise<ContactFull[]> => {\n    return requestWrapper('Contacts', 'get', data);\n}\n\nexport const createContact = (data: ContactFull[]): Promise<ContactFull[]> => {\n    return requestWrapper('Contacts', 'post', {records: data});\n}\n","import React, { useEffect, useState } from 'react';\nimport { SearchableDropdown, ChannelsIcon, SearchableDropdownItem } from \"@frontapp/plugin-components\";\nimport { useAppSelector } from \"../../../app/hooks\";\nimport { frontContextSelector } from \"../../../app/frontContextSlice\";\nimport { Contact, ContactFull } from \"../../../interfaces/Contact\";\nimport { Company, CompanyFull } from \"../../../interfaces/Company\";\n\nimport './styles.scss';\nimport { getCompaniesList, getContactsList } from \"../../../utils/airtableUtils\";\n\nconst displayRow = ({ title, value }: { title: string; value?: any; }) => value ? <>\n\t<div className=\"details-section-item-property-name\">{title}</div>\n\t<div className=\"details-section-item-property-value\">{value}</div>\n</> : null;\n\nexport const displayContact = (contact?: Contact) => {\n\treturn contact ? <>\n\t\t<div className=\"details-section-title\">{contact['Full Name']}</div>\n\t\t{displayRow({ title: 'Email', value: contact.Email })}\n\t\t{displayRow({ title: 'Phone', value: contact.Phone })}\n\t\t{displayRow({ title: 'Role', value: contact.Role?.join(', ') })}\n\t\t{displayRow({ title: 'Title', value: contact.Title })}\n\t</> : null;\n}\n\nexport const displayCompany = (company?: Company) => {\n\treturn company ? <>\n\t\t<div className=\"details-section-title\">{company.Company}</div>\n\t\t{displayRow({ title: 'Website', value: company.Website })}\n\t\t{displayRow({ title: 'Address', value: company.Address })}\n\t\t{displayRow({ title: 'Industry', value: company.Industry })}\n\t\t{displayRow({ title: 'Employees', value: company.Employees })}\n\t\t{displayRow({ title: 'Contract Value', value: company['Contract Value'] })}\n\t\t{displayRow({ title: 'Segment', value: company.Segment })}\n\t\t{displayRow({ title: 'Contract Renewal Date', value: company.Renewal })}\n\t</> : null;\n}\n\nconst ThisConversationTab = (): JSX.Element => {\n\n\tconst frontContext = useAppSelector(frontContextSelector);\n\t// all contacts per conversation\n\tconst [contacts, setContacts] = useState<ContactFull[]>([]);\n\t// all companies per conversation\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\t// all contacts as dropdown options\n\tconst [contactOptions, setContactOptions] = useState<SearchableDropdownItem[]>([]);\n\t// currently shown contact\n\tconst [selectedContact, selectContact] = useState<ContactFull | null>();\n\n\tconst handleSelectContact = (option: SearchableDropdownItem) => {\n\t\tconst item = contacts.find(contact => contact.id === option.key)\n\t\tif (item) {\n\t\t\tselectContact(item);\n\t\t}\n\t};\n\n\tconst getData = async (contactNames: string[]) => {\n\t\t// TODO add new values to DB to see real contacts in plugin\n\t\tcontactNames = [\"Leyton Graves\",\"Pierre Smith\"]\n\t\tconst contacts = await getContactsList({'filterByFormula': `OR(${contactNames.map(name => `{Full Name}='${name}'`)})`});\n\t\tconst companies = await getCompaniesList({'filterByFormula': `OR(${contacts.map((c: any) => `FIND('${c.fields[\"Full Name\"]}', ARRAYJOIN({Contacts}))`)})`});\n\n\t\tsetContacts(contacts);\n\t\tsetCompanies(companies);\n\t}\n\n\n\t// Takes contact names from Front Conversation\n\tuseEffect(() => {\n\t\tif (!frontContext || frontContext.listMessages === undefined) {\n\t\t\tsetContacts([]);\n\t\t\tsetCompanies([]);\n\t\t\treturn;\n\t\t}\n\t\tfrontContext.listMessages().then(r => {\n\t\t\tconst allConversationContacts: string[]  = r.results.flatMap(m => [...(m.to.map(t => t.handle)), m.from?.handle, ...(m.cc?.map(c => c.handle) || []), ...(m.bcc?.map(b => b.handle) || [])])\n\t\t\t\t.filter((value, index, self) => self.indexOf(value) === index);\n\n\t\t\treturn getData(allConversationContacts);\n\t\t})\n\t\t.catch(() => {\n\t\t\tsetContacts([])\n\t\t\tsetCompanies([])\n\t\t});\n\t}, [frontContext]);\n\n\tuseEffect(() => {\n\t\tconst dropdownOptions = contacts.map(contact => ({ key: contact.id as string, label: contact.fields['Full Name'] }))\n\t\tsetContactOptions(dropdownOptions);\n\n\t\tdropdownOptions.length ? handleSelectContact(dropdownOptions[0]) : selectContact(null)\n\t}, [contacts])\n\n\tconst companiesToBeDisplayed = selectedContact ? companies.filter(c => c?.fields?.Contacts?.includes(selectedContact?.id as string)).map(c => c.fields) : [];\n\n\treturn <div className=\"this-conversation-wrapper\">\n\t\t<div className=\"this-conversation-header\">\n\t\t\t<div className=\"this-conversation-dropdown\">\n\t\t\t\t<SearchableDropdown\n\t\t\t\t\tisRequired={true}\n\t\t\t\t\tautoWidth={true}\n\t\t\t\t\tonSelectValue={handleSelectContact}\n\t\t\t\t\ttitle=\"Contact\"\n\t\t\t\t\tplaceholder=\"Select contact\"\n\t\t\t\t\toptions={contactOptions}\n\t\t\t\t\tvalue={{ key: selectedContact?.id as string, label: selectedContact?.fields['Full Name'] as string }}\n\t\t\t\t\ticon={<ChannelsIcon />}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t\t{selectedContact && <div className=\"details-main-info\">\n\t\t\t{displayContact(selectedContact.fields)}\n\t\t\t{/* there is a possibility one contact has multiple companies assignment*/}\n\t\t\t{companiesToBeDisplayed.map((c: Company) =>  displayCompany(c))}\n\t\t</div>}\n\t</div>\n};\n\nexport default ThisConversationTab;\n","import React  from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n\tItemCard,\n} from '@frontapp/plugin-components';\nimport { Contact } from '../../interfaces/Contact';\n\nimport './styles.scss';\n\ninterface ContactCardProps {\n\tcontact: Contact;\n\tid: string;\n}\n\nconst ContactCard: React.FC<ContactCardProps> = ({ contact , id}) => {\n\tconst history = useHistory();\n\n\tconst goToItem = (id: string) => {\n\t\thistory.push(`/items/${id}`);\n\t};\n\n\treturn (\n\t\t<ItemCard title={contact['Full Name']} width={'100%'} className=\"contact-card\" onClick={() => goToItem(id)}>\n\t\t\t{\n\t\t\t\tcontact['Email'] ? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Email']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t\t{\n\t\t\t\tcontact['Phone']? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Phone']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t\t{\n\t\t\t\tcontact['Title'] ? <div className=\"contact-card-body-line\">\n\t\t\t\t\t<span className=\"item-card-body-line-text\">{contact['Title']}</span>\n\t\t\t\t</div> : null\n\t\t\t}\n\t\t</ItemCard>\n\t);\n};\n\nexport default ContactCard;\n","import React, { useMemo, useState } from 'react';\nimport { SearchInput, NoResults } from '@frontapp/plugin-components';\nimport ContactCard from '../../../components/ContactCard';\nimport { ContactFull } from '../../../interfaces/Contact';\nimport { CompanyFull} from '../../../interfaces/Company';\n\nimport './styles.scss';\n\nexport interface SearchTabProps {\n\tcontacts: ContactFull[];\n\tcompanies: CompanyFull[];\n}\n\nconst SearchTab:React.FC<SearchTabProps> = ({contacts}) => {\n\tconst [searchValue, setSearchValue] = useState<string>('');\n\n\tconst contactsToDisplay: ContactFull[] = useMemo(() => {\n\t\treturn contacts\n\t\t\t.filter(({ fields }) => fields['Full Name']?.toLowerCase()?.includes(searchValue.toLowerCase()) || fields['Email']?.toLowerCase()?.includes(searchValue.toLowerCase()));\n\t}, [contacts, searchValue]);\n\n\tconst onContactsSearch = (itemName: string) => {\n\t\tsetSearchValue(itemName);\n\t};\n\n\treturn <div className=\"search-tab-wrapper\">\n\t\t<SearchInput className=\"search-tab-body-search-input\" label=\"Contact name or email\" placeholder=\"Search by contact name or email\" onChange={onContactsSearch} isClearIconNeeded={false} />\n\t\t{\n\t\t\tsearchValue && (\n\t\t\t\t<div className=\"search-tab-body-search-value\">\n\t\t\t\t\tResults for “{searchValue}”\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\t{\n\t\t\tcontactsToDisplay.length > 0 && contactsToDisplay.map(({ fields, id }) => <ContactCard contact={fields} key={fields['Full Name']} id={id as string} />)\n\t\t}\n\t\t{\n\t\t\tcontactsToDisplay.length === 0 && !!searchValue && <NoResults className=\"search-tab-body-no-results\" />\n\t\t}\n\t</div>\n};\n\nexport default SearchTab;\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route, useLocation, useHistory, Link } from 'react-router-dom';\nimport { Tabs, Button } from '@frontapp/plugin-components';\nimport { ContactFull } from '../../interfaces/Contact';\nimport { CompanyFull } from \"../../interfaces/Company\";\n\nimport ThisConversationTab from \"./ThisConversationTab\";\nimport SearchTab from \"./SearchTab\";\n\nimport './styles.scss';\n\nconst tabs = [\n\t{\n\t\tlabel: 'This conversation',\n\t\tkey: '/primary'\n\t},\n\t{\n\t\tlabel: 'Search',\n\t\tkey: '/primary/search'\n\t}\n];\n\nexport interface PrimaryProps {\n\tcontacts: ContactFull[]\n\tcompanies: CompanyFull[]\n}\n\nconst Primary: React.FC<PrimaryProps> = ({ contacts, companies }) => {\n\tconst history = useHistory();\n\tconst location = useLocation();\n\tconst [selectedTab, setSelectedTab] = useState(tabs[0].key);\n\n\tuseEffect(() => {\n\t\t// Need to setup Tab when we back from Item Details page or from another pages\n\t\tsetSelectedTab(location.pathname);\n\t}, []);\n\n\tconst onTabClick = (tabKey: string) => {\n\t\thistory.push(tabKey);\n\t\tsetSelectedTab(tabKey);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"primary-header\">\n\t\t\t\t<span className=\"primary-header-text\">Items</span>\n\t\t\t\t<Link to={'/create'} className=\"primary-header-link\">\n\t\t\t\t\t<Button variant=\"tertiary\" label=\"+ Create contact\" />\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t\t<Tabs tabs={tabs} onClick={onTabClick} isSelected={selectedTab} />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/primary\">\n\t\t\t\t\t<ThisConversationTab />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/primary/search\">\n\t\t\t\t\t<SearchTab companies={companies} contacts={contacts} />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n};\n\nexport default Primary;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { PageReturnHeader } from '@frontapp/plugin-components';\nimport { ContactFull } from '../../interfaces/Contact';\nimport { CompanyFull } from \"../../interfaces/Company\";\nimport { displayContact, displayCompany } from '../Primary/ThisConversationTab';\n\nimport './styles.scss';\n\ninterface ParamTypes {\n\tid: string;\n}\n\nexport interface ContactDetailsProps {\n\tcontacts: ContactFull[]\n\tcompanies: CompanyFull[]\n}\n\nconst ContactDetails:React.FC<ContactDetailsProps> = ({contacts, companies}) => {\n\tconst { goBack } = useHistory();\n\tconst { id } = useParams<ParamTypes>();\n\tconst [contact, setContact] = useState<ContactFull>();\n\tconst [company, setCompany] = useState<CompanyFull>();\n\n\tuseEffect(() => {\n\t\tconst selectedContact = contacts?.find(contact => contact.id === id);\n\t\tconst selectedCompany = companies?.find(company => selectedContact?.fields?.Company?.includes(company?.id as string));\n\t\tsetContact(selectedContact);\n\t\tsetCompany(selectedCompany);\n\t}, [contacts, companies, id]);\n\n\tconst onGoBack = () => {\n\t\tgoBack();\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"details-header\">\n\t\t\t\t<PageReturnHeader onReturnClick={onGoBack} label=\"Contact details\" />\n\t\t\t</div>\n\t\t\t<div className=\"details-main-info\">\n\t\t\t\t{displayContact(contact?.fields)}\n\t\t\t\t{displayCompany(company?.fields)}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default ContactDetails;\n","export const ROLE_OPTIONS = [\n    \"Champion\",\n    \"Decision Maker\",\n    \"Procurement\",\n    \"Influencer\",\n]","import React, { useCallback, useMemo } from 'react';\nimport { Formik, FormikErrors, useFormikContext } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { SearchableDropdown, Footer, TextField, PageReturnHeader, SearchableDropdownItem } from '@frontapp/plugin-components';\nimport { useAppDispatch } from '../../app/hooks';\nimport { CompanyFull } from '../../interfaces/Company';\nimport { ContactFull } from \"../../interfaces/Contact\";\nimport { ROLE_OPTIONS } from '../../consts/roles';\nimport { createContact } from '../../utils/airtableUtils';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport './styles.scss';\n\n// tslint:disable-next-line\nexport interface ContactCreationProps {\n\tcompanies: CompanyFull[];\n\tonContactCreate: (contacts: ContactFull[]) => void;\n}\n\n// Shape of form values\ninterface FormValues {\n\tname?: string;\n\temail?: string;\n\tphone?: string;\n\tcompany: SearchableDropdownItem | null;\n\trole?: SearchableDropdownItem | null;\n}\n\nconst formValidation = (values: FormValues) => {\n\tconst errors: FormikErrors<FormValues> = {};\n\n\tif (!values.name?.length) {\n\t\terrors.name = 'The Contact Name is required.';\n\t}\n\n\tif (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(values.email as string)) {\n\t\terrors.email = 'Please enter a valid email.';\n\t}\n\n\tif (!values.email?.length) {\n\t\terrors.email = 'The Email is required.';\n\t}\n\n\treturn errors;\n};\n\nconst initialValues: FormValues = {\n\tname: '',\n\temail: '',\n\tphone: '',\n\tcompany: null,\n\trole: null,\n};\n\nconst ContactCreation: React.FC<ContactCreationProps> = ({ companies, onContactCreate }) => {\n\tconst { goBack } = useHistory();\n\tconst dispatch = useAppDispatch();\n\n\tconst onSubmit = useCallback(async (values) => {\n\t\tconst dataToPass: ContactFull[] = [{\n\t\t\tfields: {\n\t\t\t\t\"Full Name\": values.name,\n\t\t\t\t\"Email\": values.email,\n\t\t\t\t\"Phone\": values.phone\n\t\t\t}\n\t\t}];\n\t\tif (values.company?.key) {\n\t\t\tdataToPass[0].fields.Company = [values.company?.key];\n\t\t}\n\t\tif (values.role?.key) {\n\t\t\tdataToPass[0].fields.Role = [values.role?.key];\n\t\t}\n\t\tconst createdContacts = await createContact(dataToPass);\n\t\tonContactCreate(createdContacts);\n\n\t\ttoast.success('Contact created!', {\n\t\t\tposition: toast.POSITION.TOP_RIGHT,\n\t\t\tautoClose: 5000\n\t\t});\n\t},[dispatch, goBack]);\n\n\treturn (\n\t\t<div className=\"contact-creation-wrapper\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tvalidate={formValidation}\n\t\t\t\tonSubmit={onSubmit}\n\t\t\t>\n\t\t\t\t{({\n\t\t\t\t\tvalues,\n\t\t\t\t\thandleSubmit,\n\t\t\t\t\tisValid,\n\t\t\t\t\tdirty,\n\t\t\t\t\tsetFieldValue,\n\t\t\t\t\tsetTouched,\n\t\t\t\t\terrors,\n\t\t\t\t\ttouched,\n\t\t\t\t}) => (<>\n\t\t\t\t\t<div className=\"contact-creation-body\">\n\t\t\t\t\t\t<PageReturnHeader label=\"Create new\" onReturnClick={goBack} className=\"contact-creation-prh\" />\n\t\t\t\t\t\t<h2 className=\"contact-creation-title\">Create new contact</h2>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\t\t\tlabel=\"Name\"\n\t\t\t\t\t\t\t\tvalue={values.name}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact name\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('name', name)}\n\t\t\t\t\t\t\t\tonBlur={() => setTouched({ ...touched, name: true }, true)}\n\t\t\t\t\t\t\t\terrorText={errors.name && touched.name ? errors.name : ''}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tisRequired={true}\n\t\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\t\tvalue={values.email}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact email\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('email', name)}\n\t\t\t\t\t\t\t\tonBlur={() => setTouched({ ...touched, email: true }, true)}\n\t\t\t\t\t\t\t\terrorText={errors.email && touched.email ? errors.email : ''}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"contact-field-wrapper\">\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tlabel=\"Phone\"\n\t\t\t\t\t\t\t\tvalue={values.phone}\n\t\t\t\t\t\t\t\tplaceholder=\"Contact phone\"\n\t\t\t\t\t\t\t\tonChange={(name: string) => setFieldValue('phone', name)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ItemCompany companies={companies} />\n\t\t\t\t\t\t<ItemRole />\n\t\t\t\t\t</div>\n\t\t\t\t\t<Footer\n\t\t\t\t\t\tisPrimaryDisabled={!isValid || !dirty}\n\t\t\t\t\t\tprimaryLabel=\"Create\"\n\t\t\t\t\t\tonPrimaryClick={handleSubmit}\n\t\t\t\t\t\tsecondaryLabel=\"Cancel\"\n\t\t\t\t\t\tonSecondaryClick={goBack}\n\t\t\t\t\t/>\n\t\t\t\t</>)}\n\t\t\t</Formik>\n\t\t\t<ToastContainer />\n\t\t</div>\n\t);\n};\n\ninterface ItemCompanyProps {\n\tcompanies: CompanyFull[];\n}\n\nconst ItemCompany: React.FC<ItemCompanyProps> = ({ companies }) => {\n\t// const dispatch = useAppDispatch();\n\tconst { values, setFieldValue } = useFormikContext<FormValues>();\n\t// TODO: get from store all companies (useAppSelector(companiesSelector);)\n\t// useMemo - temporary\n\tconst companyOptions: SearchableDropdownItem[] = useMemo(() => {\n\t\treturn companies.map(company => ({key: company.id as string, label: company.fields.Company as string}))\n\t}, [companies]);\n\n\tconst handleSelectCompany = (value: SearchableDropdownItem) => {\n\t\tsetFieldValue('company', value);\n\t};\n\n\treturn <div className=\"contact-company-wrapper\">\n\t\t<SearchableDropdown\n\t\t\tonSelectValue={handleSelectCompany}\n\t\t\ttitle=\"Company\"\n\t\t\tplaceholder=\"Select company\"\n\t\t\toptions={companyOptions}\n\t\t\tvalue={values.company}\n\t\t/>\n\t</div>;\n};\n\nconst ItemRole = () => {\n\t// const dispatch = useAppDispatch();\n\tconst { values, setFieldValue } = useFormikContext<FormValues>();\n\tconst roleOptions = useMemo(() => {\n\t\treturn ROLE_OPTIONS.map(role => ({key: role, label: role}))\n\t}, []);\n\n\tconst handleSelectRole = (value: SearchableDropdownItem) => {\n\t\tsetFieldValue('role', value);\n\t};\n\n\treturn <div className=\"contact-role-wrapper\">\n\t\t<SearchableDropdown\n\t\t\tonSelectValue={handleSelectRole}\n\t\t\ttitle=\"Role\"\n\t\t\tplaceholder=\"Select role\"\n\t\t\toptions={roleOptions}\n\t\t\tvalue={values.role}\n\t\t/>\n\t</div>;\n};\n\nexport default ContactCreation;\n","import React, {useEffect, useState} from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Primary from '../views/Primary';\nimport ItemDetails from '../views/ContactDetails';\nimport ItemCreation from '../views/ContactCreation';\nimport { getCompaniesList, getContactsList } from '../utils/airtableUtils';\nimport { CompanyFull } from \"../interfaces/Company\";\nimport { ContactFull } from \"../interfaces/Contact\";\n\nimport Front from '@frontapp/plugin-sdk';\nimport { useAppDispatch } from './hooks';\nimport { setFrontContext } from './frontContextSlice';\n\nfunction App() {\n\tconst [companies, setCompanies] = useState<CompanyFull[]>([]);\n\tconst [contacts, setContacts] = useState<ContactFull[]>([]);\n\tconst dispatch = useAppDispatch();\n\n\tuseEffect(() => {\n\t\tconst subscription = Front.contextUpdates.subscribe(newContext => dispatch(setFrontContext(newContext)));\n\t\treturn () => subscription.unsubscribe();\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// Example of requests. Will be removed after further improvements\n\t\tconst getCompanies = async () => {\n\t\t\tconst companies = await getCompaniesList();\n\t\t\tsetCompanies(companies);\n\t\t}\n\t\tconst getContacts = async () => {\n\t\t\tconst contacts = await getContactsList();\n\t\t\tsetContacts(contacts);\n\t\t}\n\n\t\tgetCompanies();\n\t\tgetContacts();\n\t}, []);\n\n\tconst onContactCreate = (createdContacts: ContactFull[]) => {\n\t\tsetContacts([...createdContacts, ...contacts])\n\t}\n\n\treturn (\n\t\t<Router basename=\"/front-plugin-demo\">\n\t\t\t<Switch>\n\t\t\t\t<Route\n\t\t\t\t\texact\n\t\t\t\t\tpath=\"/\"\n\t\t\t\t\trender={() => <Redirect to=\"/primary\" />}\n\t\t\t\t/>\n\t\t\t\t<Route path=\"/create\">\n\t\t\t\t\t<ItemCreation companies={companies} onContactCreate={onContactCreate} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/items/:id\">\n\t\t\t\t\t<ItemDetails companies={companies} contacts={contacts} />\n\t\t\t\t</Route>\n\t\t\t\t<Route path=\"/primary\" >\n\t\t\t\t\t<Primary companies={companies} contacts={contacts} />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { Contact } from '../interfaces/Contact';\nimport { RootState } from './store';\n\nconst createContactMethod = () => Promise.resolve([]);\n\ninterface ContactId {\n\t[key: string]: Contact;\n}\n\nexport interface ContactsIds {\n\t[key: string]: Contact[];\n}\n\nexport const createContact = createAsyncThunk('contacts/createContact', async (data, { rejectWithValue, dispatch }) => {\n\ttry {\n\t\treturn createContactMethod();\n\t} catch (err) {\n\t\t// @ts-ignore\n\t\treturn rejectWithValue(err.response.data);\n\t}\n});\n\ninterface ContactsState {\n\tentities: Contact[],\n\tcontactsIds: ContactId;\n\tcontactsByWorkspaceId: ContactsIds;\n}\n\nconst initialState: ContactsState = {\n\tentities: [],\n\tcontactsIds: {},\n\tcontactsByWorkspaceId: {},\n};\n\nexport const contactsSlice = createSlice({\n\tname: 'contacts',\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {},\n});\n\nexport const contactsSelector = (state: RootState): Contact[] => state.contacts.entities;\nexport const contactsByIdsSelector = (state: RootState): ContactId => state.contacts.contactsIds;\nexport const contactsByWorkspaceIdSelector = (state: RootState): ContactsIds => state.contacts.contactsByWorkspaceId;\n\nexport default contactsSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport contactsReducer from './contactsSlice';\nimport frontContextReducer from './frontContextSlice';\n\nexport const store = configureStore({\n\treducer: {\n\t\tcontacts: contactsReducer,\n\t\tfront: frontContextReducer\n\t},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}